{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst parseOtherProjects = mdContent => {\n  const others = [];\n  const lines = mdContent.split(\"\\n\");\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (line.startsWith(\"## \")) {\n      const name = line.substr(3).trim();\n      const description = lines[++i].trim();\n      const tags = lines[++i].split(\":\")[1].trim();\n      const badges = [];\n      const buttons = [];\n      while (lines[++i] && !lines[i].startsWith(\"- Badges:\")) {}\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\n        const badgeLine = lines[i].substr(4).split(\"[\");\n        const badgeName = badgeLine[0].trim();\n        const badgeColor = badgeLine[1].split(\"]\")[0].trim();\n        badges.push({\n          text: badgeName,\n          colorScheme: badgeColor\n        });\n      }\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\n        const buttonLine = lines[i].substr(4).split(\"[\");\n        const buttonText = buttonLine[0].trim();\n        const buttonHref = buttonLine[1].split(\"]\")[0].trim();\n        buttons.push({\n          text: buttonText,\n          href: buttonHref\n        });\n      }\n      others.push({\n        name,\n        description,\n        tags: [tags],\n        badges,\n        buttons\n      });\n    }\n  }\n  return others;\n};\nconst OtherProjectsArray = () => {\n  _s();\n  const [OtherProjects, setOtherProjects] = useState([]);\n  useEffect(() => {\n    fetch(\"/content/OtherProjects.md\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch markdown content\");\n      }\n      return response.text();\n    }).then(mdContent => {\n      setOtherProjects(parseOtherProjects(mdContent));\n    }).catch(error => {\n      console.error(\"Error fetching markdown content:\", error);\n    });\n  }, []);\n  return OtherProjects;\n};\n_s(OtherProjectsArray, \"sm9GyNz2WHynJ2ng+D4C106Sd0Q=\");\n_c = OtherProjectsArray;\nexport default OtherProjectsArray;\nvar _c;\n$RefreshReg$(_c, \"OtherProjectsArray\");","map":{"version":3,"names":["useState","useEffect","parseOtherProjects","mdContent","others","lines","split","i","length","line","startsWith","name","substr","trim","description","tags","badges","buttons","badgeLine","badgeName","badgeColor","push","text","colorScheme","buttonLine","buttonText","buttonHref","href","OtherProjectsArray","_s","OtherProjects","setOtherProjects","fetch","then","response","ok","Error","catch","error","console","_c","$RefreshReg$"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/OtherProjectsArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseOtherProjects = (mdContent) => {\r\n  const others = [];\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i];\r\n\r\n    if (line.startsWith(\"## \")) {\r\n      const name = line.substr(3).trim();\r\n      const description = lines[++i].trim();\r\n      const tags = lines[++i].split(\":\")[1].trim();\r\n      const badges = [];\r\n      const buttons = [];\r\n\r\n      while (lines[++i] && !lines[i].startsWith(\"- Badges:\")) {}\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        const badgeLine = lines[i].substr(4).split(\"[\");\r\n        const badgeName = badgeLine[0].trim();\r\n        const badgeColor = badgeLine[1].split(\"]\")[0].trim();\r\n        badges.push({ text: badgeName, colorScheme: badgeColor });\r\n      }\r\n\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        const buttonLine = lines[i].substr(4).split(\"[\");\r\n        const buttonText = buttonLine[0].trim();\r\n        const buttonHref = buttonLine[1].split(\"]\")[0].trim();\r\n        buttons.push({ text: buttonText, href: buttonHref });\r\n      }\r\n\r\n      others.push({\r\n        name,\r\n        description,\r\n        tags: [tags],\r\n        badges,\r\n        buttons,\r\n      });\r\n    }\r\n  }\r\n\r\n  return others;\r\n};\r\n\r\nconst OtherProjectsArray = () => {\r\n  const [OtherProjects, setOtherProjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/content/OtherProjects.md\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setOtherProjects(parseOtherProjects(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return OtherProjects;\r\n};\r\n\r\nexport default OtherProjectsArray;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
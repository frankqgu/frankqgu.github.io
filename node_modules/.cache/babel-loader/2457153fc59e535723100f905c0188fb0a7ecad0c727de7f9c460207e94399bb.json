{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst parseExperience = mdContent => {\n  const experience = [];\n  const lines = mdContent.split(\"\\n\");\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (line.startsWith(\"## \")) {\n      const company = line.substr(3).trim();\n      const positionLine = lines[++i].substr(2).split(\"|\").map(s => s.trim());\n      const position = positionLine[0].slice(1, -1);\n      const duration = positionLine[1].trim();\n      const imageLine = lines[++i];\n      const image = imageLine.match(/!\\[(.*)\\]\\((.*)\\)/)[2];\n      const tags = lines[++i].split(\":\")[1].trim();\n      const badges = [];\n      const listItems = [];\n      while (lines[++i] && !lines[i].startsWith(\"- Badges:\")) {}\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\n        const badgeLine = lines[i].substr(4).split(\"[\");\n        const badgeName = badgeLine[0].trim();\n        const badgeColor = badgeLine[1].split(\"]\")[0].trim();\n        badges.push({\n          name: badgeName,\n          colorScheme: badgeColor\n        });\n      }\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\n        listItems.push(lines[i].substr(4));\n      }\n      experience.push({\n        image,\n        company,\n        position,\n        duration,\n        badges,\n        listItems,\n        tags\n      });\n    }\n  }\n  return experience;\n};\nconst ExperienceArray = () => {\n  _s();\n  const [experience, setExperience] = useState([]);\n  useEffect(() => {\n    fetch(\"/content/Experience.md\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch markdown content\");\n      }\n      return response.text();\n    }).then(mdContent => {\n      setExperience(parseExperience(mdContent));\n    }).catch(error => {\n      console.error(\"Error fetching markdown content:\", error);\n    });\n  }, []);\n  return experience;\n};\n_s(ExperienceArray, \"jsTZQKwAbmrZ6rUyU1jcaf8envY=\");\n_c = ExperienceArray;\nexport default ExperienceArray;\nvar _c;\n$RefreshReg$(_c, \"ExperienceArray\");","map":{"version":3,"names":["useState","useEffect","parseExperience","mdContent","experience","lines","split","i","length","line","startsWith","company","substr","trim","positionLine","map","s","position","slice","duration","imageLine","image","match","tags","badges","listItems","badgeLine","badgeName","badgeColor","push","name","colorScheme","ExperienceArray","_s","setExperience","fetch","then","response","ok","Error","text","catch","error","console","_c","$RefreshReg$"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/ExperienceArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseExperience = (mdContent) => {\r\n  const experience = [];\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i];\r\n\r\n    if (line.startsWith(\"## \")) {\r\n      const company = line.substr(3).trim();\r\n      const positionLine = lines[++i]\r\n        .substr(2)\r\n        .split(\"|\")\r\n        .map((s) => s.trim());\r\n      const position = positionLine[0].slice(1, -1);\r\n      const duration = positionLine[1].trim();\r\n      const imageLine = lines[++i];\r\n      const image = imageLine.match(/!\\[(.*)\\]\\((.*)\\)/)[2];\r\n      const tags = lines[++i].split(\":\")[1].trim();\r\n      const badges = [];\r\n      const listItems = [];\r\n\r\n      while (lines[++i] && !lines[i].startsWith(\"- Badges:\")) {}\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        const badgeLine = lines[i].substr(4).split(\"[\");\r\n        const badgeName = badgeLine[0].trim();\r\n        const badgeColor = badgeLine[1].split(\"]\")[0].trim();\r\n        badges.push({ name: badgeName, colorScheme: badgeColor });\r\n      }\r\n\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        listItems.push(lines[i].substr(4));\r\n      }\r\n\r\n      experience.push({\r\n        image,\r\n        company,\r\n        position,\r\n        duration,\r\n        badges,\r\n        listItems,\r\n        tags,\r\n      });\r\n    }\r\n  }\r\n\r\n  return experience;\r\n};\r\n\r\nconst ExperienceArray = () => {\r\n  const [experience, setExperience] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/content/Experience.md\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setExperience(parseExperience(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return experience;\r\n};\r\n\r\nexport default ExperienceArray;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
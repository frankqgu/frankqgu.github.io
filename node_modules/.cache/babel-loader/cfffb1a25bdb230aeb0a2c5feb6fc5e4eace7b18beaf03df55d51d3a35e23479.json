{"ast":null,"code":"import _slicedToArray from\"C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";var parseProfile=function parseProfile(mdContent){var profile={siteName:\"\",headerName:\"\",headerRole:\"\",headerDesc:\"\",about:\"\",contact:\"\",linkedin:\"\",github:\"\",email:\"\",logo:\"\"};var lines=mdContent.split(\"\\n\");for(var i=0;i<lines.length;i++){var line=lines[i];if(line.startsWith(\"## \")){var section=line.substr(3).trim();switch(section){case\"Header\":profile.headerName=lines[++i].substr(2).trim();profile.headerRole=lines[++i].substr(2).trim();profile.headerDesc=lines[++i].substr(2).trim();break;case\"About\":profile.about=lines[++i].trim();break;case\"Contact\":profile.contact=lines[++i].trim();var contactLinks=[\"LinkedIn\",\"GitHub\",\"Email\"];for(var _i=0,_contactLinks=contactLinks;_i<_contactLinks.length;_i++){var link=_contactLinks[_i];var linkLine=lines[++i].substr(2).trim();if(linkLine.startsWith(link)){profile[link.toLowerCase()]=linkLine.split(\": \")[1].trim();}}break;case\"Logo\":profile.logo=lines[++i].substr(2).trim();break;default:// do nothing\nbreak;}}}return profile;};var ProfileArray=function ProfileArray(){var _useState=useState({siteName:\"\",headerName:\"\",headerRole:\"\",headerDesc:\"\",about:\"\",contact:\"\",linkedin:\"\",github:\"\",email:\"\",logo:\"\"}),_useState2=_slicedToArray(_useState,2),profile=_useState2[0],setProfile=_useState2[1];useEffect(function(){fetch(\"/content/Profile.md\").then(function(response){if(!response.ok){throw new Error(\"Failed to fetch markdown content\");}return response.text();}).then(function(mdContent){setProfile(parseProfile(mdContent));}).catch(function(error){console.error(\"Error fetching markdown content:\",error);});},[]);return profile;};export default ProfileArray;","map":{"version":3,"names":["useState","useEffect","parseProfile","mdContent","profile","siteName","headerName","headerRole","headerDesc","about","contact","linkedin","github","email","logo","lines","split","i","length","line","startsWith","section","substr","trim","contactLinks","_i","_contactLinks","link","linkLine","toLowerCase","ProfileArray","_useState","_useState2","_slicedToArray","setProfile","fetch","then","response","ok","Error","text","catch","error","console"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/ProfileArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseProfile = (mdContent) => {\r\n  const profile = {\r\n    siteName: \"\",\r\n    headerName: \"\",\r\n    headerRole: \"\",\r\n    headerDesc: \"\",\r\n    about: \"\",\r\n    contact: \"\",\r\n    linkedin: \"\",\r\n    github: \"\",\r\n    email: \"\",\r\n    logo: \"\",\r\n  };\r\n\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i];\r\n\r\n    if (line.startsWith(\"## \")) {\r\n      const section = line.substr(3).trim();\r\n\r\n      switch (section) {\r\n        case \"Header\":\r\n          profile.headerName = lines[++i].substr(2).trim();\r\n          profile.headerRole = lines[++i].substr(2).trim();\r\n          profile.headerDesc = lines[++i].substr(2).trim();\r\n          break;\r\n        case \"About\":\r\n          profile.about = lines[++i].trim();\r\n          break;\r\n        case \"Contact\":\r\n          profile.contact = lines[++i].trim();\r\n          const contactLinks = [\"LinkedIn\", \"GitHub\", \"Email\"];\r\n          for (const link of contactLinks) {\r\n            const linkLine = lines[++i].substr(2).trim();\r\n            if (linkLine.startsWith(link)) {\r\n              profile[link.toLowerCase()] = linkLine.split(\": \")[1].trim();\r\n            }\r\n          }\r\n          break;\r\n        case \"Logo\":\r\n          profile.logo = lines[++i].substr(2).trim();\r\n          break;\r\n        default:\r\n          // do nothing\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return profile;\r\n};\r\n\r\nconst ProfileArray = () => {\r\n  const [profile, setProfile] = useState({\r\n    siteName: \"\",\r\n    headerName: \"\",\r\n    headerRole: \"\",\r\n    headerDesc: \"\",\r\n    about: \"\",\r\n    contact: \"\",\r\n    linkedin: \"\",\r\n    github: \"\",\r\n    email: \"\",\r\n    logo: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(\"/content/Profile.md\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setProfile(parseProfile(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return profile;\r\n};\r\n\r\nexport default ProfileArray;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from\"C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";var parseTags=function parseTags(mdContent){var tags=[];var lines=mdContent.split(\"\\n\");for(var i=0;i<lines.length;i++){var value=lines[i];tags.push({value:value});}return tags;};var TagsArray=function TagsArray(file){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),Tags=_useState2[0],setTags=_useState2[1];useEffect(function(){fetch(\"/content/\".concat(file,\".md\")).then(function(response){if(!response.ok){throw new Error(\"Failed to fetch markdown content\");}return response.text();}).then(function(mdContent){setTags(parseTags(mdContent));}).catch(function(error){console.error(\"Error fetching markdown content:\",error);});},[file]);return Tags;};export default TagsArray;","map":{"version":3,"names":["useState","useEffect","parseTags","mdContent","tags","lines","split","i","length","value","push","TagsArray","file","_useState","_useState2","_slicedToArray","Tags","setTags","fetch","concat","then","response","ok","Error","text","catch","error","console"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/TagsArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseTags = (mdContent) => {\r\n  const tags = [];\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const value = lines[i];\r\n\r\n    tags.push({\r\n      value\r\n    });\r\n  }\r\n  return tags;\r\n};\r\n\r\nconst TagsArray = (file) => {\r\n  const [Tags, setTags] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(`/content/${file}.md`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setTags(parseTags(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, [file]);\r\n\r\n  return Tags;\r\n};\r\n\r\nexport default TagsArray;\r\n"],"mappings":"wIAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,SAAS,CAAK,CAC/B,GAAM,CAAAC,IAAI,CAAG,EAAE,CACf,GAAM,CAAAC,KAAK,CAAGF,SAAS,CAACG,KAAK,CAAC,IAAI,CAAC,CAEnC,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,KAAK,CAACG,MAAM,CAAED,CAAC,EAAE,CAAE,CACrC,GAAM,CAAAE,KAAK,CAAGJ,KAAK,CAACE,CAAC,CAAC,CAEtBH,IAAI,CAACM,IAAI,CAAC,CACRD,KAAK,CAALA,KACF,CAAC,CAAC,CACJ,CACA,MAAO,CAAAL,IAAI,CACb,CAAC,CAED,GAAM,CAAAO,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,IAAI,CAAK,CAC1B,IAAAC,SAAA,CAAwBb,QAAQ,CAAC,EAAE,CAAC,CAAAc,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA7BG,IAAI,CAAAF,UAAA,IAAEG,OAAO,CAAAH,UAAA,IAEpBb,SAAS,CAAC,UAAM,CACdiB,KAAK,aAAAC,MAAA,CAAaP,IAAI,QAAM,CACzBQ,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClB,GAAI,CAACA,QAAQ,CAACC,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,kCAAkC,CAAC,CACrD,CACA,MAAO,CAAAF,QAAQ,CAACG,IAAI,EAAE,CACxB,CAAC,CAAC,CACDJ,IAAI,CAAC,SAACjB,SAAS,CAAK,CACnBc,OAAO,CAACf,SAAS,CAACC,SAAS,CAAC,CAAC,CAC/B,CAAC,CAAC,CACDsB,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CAC1D,CAAC,CAAC,CACN,CAAC,CAAE,CAACd,IAAI,CAAC,CAAC,CAEV,MAAO,CAAAI,IAAI,CACb,CAAC,CAED,cAAe,CAAAL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}
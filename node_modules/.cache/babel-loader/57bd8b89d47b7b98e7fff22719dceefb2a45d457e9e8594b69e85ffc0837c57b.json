{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst parseTags = mdContent => {\n  const tags = [];\n  const lines = mdContent.split(\"\\n\");\n  for (let i = 0; i < lines.length; i++) {\n    const value = lines[i];\n    tags.push({\n      value\n    });\n  }\n  return tags;\n};\nconst TagsArray = file => {\n  _s();\n  const [Tags, setTags] = useState([]);\n  useEffect(() => {\n    fetch(`/content/${file}.md`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch markdown content\");\n      }\n      return response.text();\n    }).then(mdContent => {\n      setTags(parseTags(mdContent));\n    }).catch(error => {\n      console.error(\"Error fetching markdown content:\", error);\n    });\n  }, [file]);\n  return Tags;\n};\n_s(TagsArray, \"onh8YbdENKhQDzYszKURZrUeC00=\");\n_c = TagsArray;\nexport default TagsArray;\nvar _c;\n$RefreshReg$(_c, \"TagsArray\");","map":{"version":3,"names":["useState","useEffect","parseTags","mdContent","tags","lines","split","i","length","value","push","TagsArray","file","_s","Tags","setTags","fetch","then","response","ok","Error","text","catch","error","console","_c","$RefreshReg$"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/TagsArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseTags = (mdContent) => {\r\n  const tags = [];\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const value = lines[i];\r\n\r\n    tags.push({\r\n      value\r\n    });\r\n  }\r\n  return tags;\r\n};\r\n\r\nconst TagsArray = (file) => {\r\n  const [Tags, setTags] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(`/content/${file}.md`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setTags(parseTags(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, [file]);\r\n\r\n  return Tags;\r\n};\r\n\r\nexport default TagsArray;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,SAAS,GAAIC,SAAS,IAAK;EAC/B,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,KAAK,GAAGF,SAAS,CAACG,KAAK,CAAC,IAAI,CAAC;EAEnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,KAAK,GAAGJ,KAAK,CAACE,CAAC,CAAC;IAEtBH,IAAI,CAACM,IAAI,CAAC;MACRD;IACF,CAAC,CAAC;EACJ;EACA,OAAOL,IAAI;AACb,CAAC;AAED,MAAMO,SAAS,GAAIC,IAAI,IAAK;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACde,KAAK,CAAE,YAAWJ,IAAK,KAAI,CAAC,CACzBK,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;MACrD;MACA,OAAOF,QAAQ,CAACG,IAAI,EAAE;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEd,SAAS,IAAK;MACnBY,OAAO,CAACb,SAAS,CAACC,SAAS,CAAC,CAAC;IAC/B,CAAC,CAAC,CACDmB,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CAAC;EACN,CAAC,EAAE,CAACX,IAAI,CAAC,CAAC;EAEV,OAAOE,IAAI;AACb,CAAC;AAACD,EAAA,CApBIF,SAAS;AAAAc,EAAA,GAATd,SAAS;AAsBf,eAAeA,SAAS;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
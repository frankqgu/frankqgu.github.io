{"ast":null,"code":"import _slicedToArray from\"C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";var parseExperience=function parseExperience(mdContent){var experience=[];var lines=mdContent.split(\"\\n\");for(var i=0;i<lines.length;i++){var line=lines[i];if(line.startsWith(\"## \")){var company=line.substr(3).trim();var positionLine=lines[++i].substr(2).split(\"|\").map(function(s){return s.trim();});var position=positionLine[0].slice(1,-1);var duration=positionLine[1].trim();var imageLine=lines[++i];var image=imageLine.match(/!\\[(.*)\\]\\((.*)\\)/)[2];var tags=lines[++i].split(\":\")[1].trim();var badges=[];var listItems=[];while(lines[++i]&&!lines[i].startsWith(\"- Badges:\")){}while(lines[++i]&&lines[i].startsWith(\"  - \")){var badgeLine=lines[i].substr(4).split(\"[\");var badgeName=badgeLine[0].trim();var badgeColor=badgeLine[1].split(\"]\")[0].trim();badges.push({name:badgeName,colorScheme:badgeColor});}while(lines[++i]&&lines[i].startsWith(\"  - \")){listItems.push(lines[i].substr(4));}experience.push({image:image,company:company,position:position,duration:duration,badges:badges,listItems:listItems,tags:tags});}}return experience;};var ExperienceArray=function ExperienceArray(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),experience=_useState2[0],setExperience=_useState2[1];useEffect(function(){fetch(\"/content/Experience.md\").then(function(response){if(!response.ok){throw new Error(\"Failed to fetch markdown content\");}return response.text();}).then(function(mdContent){setExperience(parseExperience(mdContent));}).catch(function(error){console.error(\"Error fetching markdown content:\",error);});},[]);return experience;};export default ExperienceArray;","map":{"version":3,"names":["useState","useEffect","parseExperience","mdContent","experience","lines","split","i","length","line","startsWith","company","substr","trim","positionLine","map","s","position","slice","duration","imageLine","image","match","tags","badges","listItems","badgeLine","badgeName","badgeColor","push","name","colorScheme","ExperienceArray","_useState","_useState2","_slicedToArray","setExperience","fetch","then","response","ok","Error","text","catch","error","console"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/ExperienceArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseExperience = (mdContent) => {\r\n  const experience = [];\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i];\r\n\r\n    if (line.startsWith(\"## \")) {\r\n      const company = line.substr(3).trim();\r\n      const positionLine = lines[++i]\r\n        .substr(2)\r\n        .split(\"|\")\r\n        .map((s) => s.trim());\r\n      const position = positionLine[0].slice(1, -1);\r\n      const duration = positionLine[1].trim();\r\n      const imageLine = lines[++i];\r\n      const image = imageLine.match(/!\\[(.*)\\]\\((.*)\\)/)[2];\r\n      const tags = lines[++i].split(\":\")[1].trim();\r\n      const badges = [];\r\n      const listItems = [];\r\n\r\n      while (lines[++i] && !lines[i].startsWith(\"- Badges:\")) {}\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        const badgeLine = lines[i].substr(4).split(\"[\");\r\n        const badgeName = badgeLine[0].trim();\r\n        const badgeColor = badgeLine[1].split(\"]\")[0].trim();\r\n        badges.push({ name: badgeName, colorScheme: badgeColor });\r\n      }\r\n\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        listItems.push(lines[i].substr(4));\r\n      }\r\n\r\n      experience.push({\r\n        image,\r\n        company,\r\n        position,\r\n        duration,\r\n        badges,\r\n        listItems,\r\n        tags,\r\n      });\r\n    }\r\n  }\r\n\r\n  return experience;\r\n};\r\n\r\nconst ExperienceArray = () => {\r\n  const [experience, setExperience] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/content/Experience.md\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setExperience(parseExperience(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return experience;\r\n};\r\n\r\nexport default ExperienceArray;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
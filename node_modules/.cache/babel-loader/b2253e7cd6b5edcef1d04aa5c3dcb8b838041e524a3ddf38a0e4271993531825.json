{"ast":null,"code":"import _slicedToArray from\"C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";var parseProjects=function parseProjects(mdContent){var projects=[];var lines=mdContent.split(\"\\n\");for(var i=0;i<lines.length;i++){var line=lines[i];if(line.startsWith(\"## \")){var name=line.substr(3).trim();var description=lines[++i].trim();var imageLine=lines[++i];var image=imageLine.match(/!\\[(.*)\\]\\((.*)\\)/)[2];var tags=lines[++i].split(\":\")[1].trim();var badges=[];var buttons=[];while(lines[++i]&&!lines[i].startsWith(\"- Badges:\")){}while(lines[++i]&&lines[i].startsWith(\"  - \")){var badgeLine=lines[i].substr(4).split(\"[\");var badgeName=badgeLine[0].trim();var badgeColor=badgeLine[1].split(\"]\")[0].trim();badges.push({text:badgeName,colorScheme:badgeColor});}while(lines[++i]&&lines[i].startsWith(\"  - \")){var buttonLine=lines[i].substr(4).split(\"[\");var buttonText=buttonLine[0].trim();var buttonHref=buttonLine[1].split(\"]\")[0].trim();buttons.push({text:buttonText,href:buttonHref});}projects.push({name:name,description:description,image:image,tags:[tags],badges:badges,buttons:buttons});}}return projects;};var ProjectsArray=function ProjectsArray(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),projects=_useState2[0],setProjects=_useState2[1];useEffect(function(){fetch(\"/content/Projects.md\").then(function(response){if(!response.ok){throw new Error(\"Failed to fetch markdown content\");}return response.text();}).then(function(mdContent){setProjects(parseProjects(mdContent));}).catch(function(error){console.error(\"Error fetching markdown content:\",error);});},[]);return projects;};export default ProjectsArray;","map":{"version":3,"names":["useState","useEffect","parseProjects","mdContent","projects","lines","split","i","length","line","startsWith","name","substr","trim","description","imageLine","image","match","tags","badges","buttons","badgeLine","badgeName","badgeColor","push","text","colorScheme","buttonLine","buttonText","buttonHref","href","ProjectsArray","_useState","_useState2","_slicedToArray","setProjects","fetch","then","response","ok","Error","catch","error","console"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/ProjectsArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseProjects = (mdContent) => {\r\n  const projects = [];\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i];\r\n\r\n    if (line.startsWith(\"## \")) {\r\n      const name = line.substr(3).trim();\r\n      const description = lines[++i].trim();\r\n      const imageLine = lines[++i];\r\n      const image = imageLine.match(/!\\[(.*)\\]\\((.*)\\)/)[2];\r\n      const tags = lines[++i].split(\":\")[1].trim();\r\n      const badges = [];\r\n      const buttons = [];\r\n\r\n      while (lines[++i] && !lines[i].startsWith(\"- Badges:\")) {}\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        const badgeLine = lines[i].substr(4).split(\"[\");\r\n        const badgeName = badgeLine[0].trim();\r\n        const badgeColor = badgeLine[1].split(\"]\")[0].trim();\r\n        badges.push({ text: badgeName, colorScheme: badgeColor });\r\n      }\r\n\r\n      while (lines[++i] && lines[i].startsWith(\"  - \")) {\r\n        const buttonLine = lines[i].substr(4).split(\"[\");\r\n        const buttonText = buttonLine[0].trim();\r\n        const buttonHref = buttonLine[1].split(\"]\")[0].trim();\r\n        buttons.push({ text: buttonText, href: buttonHref });\r\n      }\r\n\r\n      projects.push({\r\n        name,\r\n        description,\r\n        image,\r\n        tags: [tags],\r\n        badges,\r\n        buttons,\r\n      });\r\n    }\r\n  }\r\n\r\n  return projects;\r\n};\r\n\r\nconst ProjectsArray = () => {\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/content/Projects.md\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setProjects(parseProjects(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return projects;\r\n};\r\n\r\nexport default ProjectsArray;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
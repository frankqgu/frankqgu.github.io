{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst parseProfile = mdContent => {\n  const profile = {\n    siteName: \"\",\n    headerName: \"\",\n    headerRole: \"\",\n    headerDesc: \"\",\n    about: \"\",\n    contact: \"\",\n    linkedin: \"\",\n    github: \"\",\n    email: \"\",\n    logo: \"\"\n  };\n  const lines = mdContent.split(\"\\n\");\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (line.startsWith(\"## \")) {\n      const section = line.substr(3).trim();\n      switch (section) {\n        case \"Header\":\n          profile.headerName = lines[++i].substr(2).trim();\n          profile.headerRole = lines[++i].substr(2).trim();\n          profile.headerDesc = lines[++i].substr(2).trim();\n          break;\n        case \"About\":\n          profile.about = lines[++i].trim();\n          break;\n        case \"Contact\":\n          profile.contact = lines[++i].trim();\n          const contactLinks = [\"LinkedIn\", \"GitHub\", \"Email\"];\n          for (const link of contactLinks) {\n            const linkLine = lines[++i].substr(2).trim();\n            if (linkLine.startsWith(link)) {\n              profile[link.toLowerCase()] = linkLine.split(\": \")[1].trim();\n            }\n          }\n          break;\n        case \"Logo\":\n          profile.logo = lines[++i].substr(2).trim();\n          break;\n        default:\n          // do nothing\n          break;\n      }\n    }\n  }\n  return profile;\n};\nconst ProfileArray = () => {\n  _s();\n  const [profile, setProfile] = useState({\n    siteName: \"\",\n    headerName: \"\",\n    headerRole: \"\",\n    headerDesc: \"\",\n    about: \"\",\n    contact: \"\",\n    linkedin: \"\",\n    github: \"\",\n    email: \"\",\n    logo: \"\"\n  });\n  useEffect(() => {\n    fetch(\"/content/Profile.md\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch markdown content\");\n      }\n      return response.text();\n    }).then(mdContent => {\n      setProfile(parseProfile(mdContent));\n    }).catch(error => {\n      console.error(\"Error fetching markdown content:\", error);\n    });\n  }, []);\n  return profile;\n};\n_s(ProfileArray, \"mzsLndoBbHeQma5/EixrPvMjsLs=\");\n_c = ProfileArray;\nexport default ProfileArray;\nvar _c;\n$RefreshReg$(_c, \"ProfileArray\");","map":{"version":3,"names":["useState","useEffect","parseProfile","mdContent","profile","siteName","headerName","headerRole","headerDesc","about","contact","linkedin","github","email","logo","lines","split","i","length","line","startsWith","section","substr","trim","contactLinks","link","linkLine","toLowerCase","ProfileArray","_s","setProfile","fetch","then","response","ok","Error","text","catch","error","console","_c","$RefreshReg$"],"sources":["C:/Users/brbsm/Documents/GitHub/frankqgu.github.io/src/components/ProfileArray.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst parseProfile = (mdContent) => {\r\n  const profile = {\r\n    siteName: \"\",\r\n    headerName: \"\",\r\n    headerRole: \"\",\r\n    headerDesc: \"\",\r\n    about: \"\",\r\n    contact: \"\",\r\n    linkedin: \"\",\r\n    github: \"\",\r\n    email: \"\",\r\n    logo: \"\",\r\n  };\r\n\r\n  const lines = mdContent.split(\"\\n\");\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i];\r\n\r\n    if (line.startsWith(\"## \")) {\r\n      const section = line.substr(3).trim();\r\n\r\n      switch (section) {\r\n        case \"Header\":\r\n          profile.headerName = lines[++i].substr(2).trim();\r\n          profile.headerRole = lines[++i].substr(2).trim();\r\n          profile.headerDesc = lines[++i].substr(2).trim();\r\n          break;\r\n        case \"About\":\r\n          profile.about = lines[++i].trim();\r\n          break;\r\n        case \"Contact\":\r\n          profile.contact = lines[++i].trim();\r\n          const contactLinks = [\"LinkedIn\", \"GitHub\", \"Email\"];\r\n          for (const link of contactLinks) {\r\n            const linkLine = lines[++i].substr(2).trim();\r\n            if (linkLine.startsWith(link)) {\r\n              profile[link.toLowerCase()] = linkLine.split(\": \")[1].trim();\r\n            }\r\n          }\r\n          break;\r\n        case \"Logo\":\r\n          profile.logo = lines[++i].substr(2).trim();\r\n          break;\r\n        default:\r\n          // do nothing\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return profile;\r\n};\r\n\r\nconst ProfileArray = () => {\r\n  const [profile, setProfile] = useState({\r\n    siteName: \"\",\r\n    headerName: \"\",\r\n    headerRole: \"\",\r\n    headerDesc: \"\",\r\n    about: \"\",\r\n    contact: \"\",\r\n    linkedin: \"\",\r\n    github: \"\",\r\n    email: \"\",\r\n    logo: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(\"/content/Profile.md\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch markdown content\");\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((mdContent) => {\r\n        setProfile(parseProfile(mdContent));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching markdown content:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return profile;\r\n};\r\n\r\nexport default ProfileArray;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}